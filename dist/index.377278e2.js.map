{"mappings":"AAAA,kCAAkC;AAElC,qBAAqB;AAErB,SAAS,IAAI,CAAC,KAAK,EAAE;IACnB,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IAC/B,MAAM,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,AAAqB,AAAC;IACtE,IAAI,CAAC,MAAM,EACT,OAAO;IAET,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,AAAC;IAEpC,IAAI,CAAC,GAAG,EACN,OAAO;IAGT,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,EAAE;QACzB,MAAM,EAAE,IAAI,CAAA,EAAE,GAAG,CAAA,EAAE,KAAK,CAAA,EAAE,MAAM,CAAA,EAAE,eAAe,CAAA,EAAE,GAAG,KAAK,CAAC,KAAK,AAAC;QAClE,GAAG,CAAC,SAAS,GAAG,eAAe,CAAC;QAChC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;KACxC,MAAM,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,EAAE;QAChC,MAAM,EAAE,IAAI,CAAA,EAAE,GAAG,CAAA,EAAE,KAAK,CAAA,EAAE,UAAU,CAAA,EAAE,GAAG,KAAK,CAAC,KAAK,AAAC;QACrD,GAAG,CAAC,IAAI,GAAG,UAAU,CAAC;QACtB,GAAG,CAAC,SAAS,GAAG,KAAK,CAAC;QACtB,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;KAC5C;IAED,IAAI,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,EACzC,KAAK,IAAI,KAAK,IAAI,KAAK,CAAC,QAAQ,CAC9B,IAAI,CAAC,KAAK,CAAC,CAAC;CAGjB;AAED,SAAS,IAAI,GAAG;IACd,MAAM,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,AAAqB,AAAC;IACtE,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC;IACnC,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC;IAEjC,MAAM,CAAC,gBAAgB,CAAC,aAAa,EAAE,SAAU,KAAK,EAAE;QACtD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KACpB,CAAC,CAAC;IAEH,IAAI,CAAC;QACH,IAAI,EAAE,MAAM;QACZ,KAAK,EAAE;YACL,GAAG,EAAE,CAAC;YACN,IAAI,EAAE,CAAC;YACP,eAAe,EAAE,WAAW;YAC5B,KAAK,EAAE,MAAM,CAAC,UAAU;YACxB,MAAM,EAAE,MAAM,CAAC,WAAW;SAC3B;QACD,QAAQ,EAAE;YACR;gBACE,IAAI,EAAE,MAAM;gBACZ,KAAK,EAAE;oBACL,eAAe,EAAE,KAAK;oBACtB,GAAG,EAAE,EAAE;oBACP,IAAI,EAAE,EAAE;oBACR,KAAK,EAAE,GAAG;oBACV,MAAM,EAAE,EAAE;iBACX;aACF;YACD;gBACE,IAAI,EAAE,MAAM;gBACZ,KAAK,EAAE;oBACL,UAAU,EAAE,YAAY;oBACxB,KAAK,EAAE,OAAO;oBACd,GAAG,EAAE,EAAE;oBACP,IAAI,EAAE,EAAE;iBACT;gBACD,QAAQ,EAAE;oBAAC,aAAa;iBAAC;aAC1B;SACF;KACF,CAAC,CAAC;CACJ","sources":["src/index.ts"],"sourcesContent":["// import Yoga from \"yoga-layout\";\n\n// console.log(Yoga);\n\nfunction draw(thing) {\n  console.log(\"drawing:\", thing);\n  const canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\n  if (!canvas) {\n    return;\n  }\n  const ctx = canvas.getContext(\"2d\");\n\n  if (!ctx) {\n    return;\n  }\n\n  if (thing.type === \"rect\") {\n    const { left, top, width, height, backgroundColor } = thing.style;\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(left, top, width, height);\n  } else if (thing.type === \"text\") {\n    const { left, top, color, fontFamily } = thing.style;\n    ctx.font = fontFamily;\n    ctx.fillStyle = color;\n    ctx.fillText(thing.children[0], left, top);\n  }\n\n  if (thing.children && thing.type !== \"text\") {\n    for (let child of thing.children) {\n      draw(child);\n    }\n  }\n}\n\nfunction init() {\n  const canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\n  canvas.height = window.innerHeight;\n  canvas.width = window.innerWidth;\n\n  canvas.addEventListener(\"pointerdown\", function (event) {\n    console.log(event);\n  });\n\n  draw({\n    type: \"rect\",\n    style: {\n      top: 0,\n      left: 0,\n      backgroundColor: \"lightgray\",\n      width: window.innerWidth,\n      height: window.innerHeight,\n    },\n    children: [\n      {\n        type: \"rect\",\n        style: {\n          backgroundColor: \"red\",\n          top: 20,\n          left: 20,\n          width: 175,\n          height: 50,\n        },\n      },\n      {\n        type: \"text\",\n        style: {\n          fontFamily: \"24px serif\",\n          color: \"black\",\n          top: 50,\n          left: 50,\n        },\n        children: [\"hello world\"],\n      },\n    ],\n  });\n}\n"],"names":[],"version":3,"file":"index.377278e2.js.map","sourceRoot":"/__parcel_source_root/"}